name: macOS Release

on:
  push:
    branches: [ "main","develop","initial"]
  pull_request:
    branches: [ "main","develop" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
        logLevel:
          description: 'Log level'
          required: true
          default: 'warning'
          type: choice
          options:
          - info
          - warning
          - debug
        tags:
          description: 'Test scenario tags'
          required: false
          type: boolean
        environment:
          description: 'Environment to run tests against'
          type: environment
          required: true

env:
  SOURCE_DIR:   ${{ github.workspace }}
  QT_VERSION:   6.9.0
  ARTIFACT:     qtapp_macos_release.zip

jobs:
  build-and-deploy:
    runs-on: macos-15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/actions-setup-qt@v4
        with:
            version: ${{ env.QT_VERSION }} 
            host: 'mac'
            target: 'desktop'
            arch: 'clang_64'
            tools: 'tools_cmake'
            setup-python: false
    
      - name: Create Build Directory
        run: mkdir build

      - name: Configure CMake
        shell: bash
        working-directory: build
        run: |
          # Find Qt's CMake configuration module.
          # This path might vary slightly based on the Qt version and installation.
          # actions-setup-qt typically adds Qt to the PATH, so find_package(Qt6 COMPONENTS Widgets) should work.
          cmake .. -DCMAKE_BUILD_TYPE=Release \
           -DQT_INSTALL_DIR="${{ env.Q-DCMAKE_PREFIX_PATH="${{ env.QT_INSTALL_DIR }}/lib/cmake" # This might be set by actions-setup-qt, or you might need to find it

      - name: Build Application
        working-directory: build
        run: cmake --build . --config Release

      - name: Package Application (Optional)
        working-directory: build
        run: |
          # If your CMake project generates a .app bundle, you can find it here.
          # For example, if your target is named 'YourApp'
          # find . -name "YourApp.app" -print
          # You might also use cpack if configured in your CMakeLists.txt
          echo "Application built. Look for .app bundle or install target in 'build' directory."

      - name: Upload Artifact (Optional)
        uses: actions/upload-artifact@v4
        with:
          name: macos-app-release
          path: build/*.app # Adjust path if your app name is different or if you use cpack
 