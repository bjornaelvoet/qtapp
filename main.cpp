// main.cpp
#include <QGuiApplication>
#include <QQmlApplicationEngine>

#include "BoardModel.h"

int main(int argc, char *argv[]) {
  // Use QGuiApplication for pure QML apps (no QWidgets needed)
  QGuiApplication app(argc, argv);

  QQmlApplicationEngine engine;

  engine.addImportPath(QML_MODULE_OUTPUT_DIR);
  qDebug() << "Added QML import path:" << QML_MODULE_OUTPUT_DIR;
  qDebug() << "Current QML engine import paths:";
  for (const QString &path : engine.importPathList()) {
    qDebug() << "- " << path;
  }

  int unusedVariable = 10; // This should trigger an "unused variable" warning

  qmlRegisterType<BoardModel>("QtAppQml", 1, 0, "MyItem");

  // 3. Register your C++ enums for QML
  // This allows QML to use BoardModel.Empty, BoardModel.Player1, etc.
  qRegisterMetaType<HexState>("HexState");
  qmlRegisterUncreatableType<BoardModel>("GameEnums", 1, 0, "BoardModel",
                                         "Access enums only");
  // Load the main QML file from the resource path generated by
  // qt_add_qml_module. The URI "QtAppQml" and the file "Main.qml" combine to
  // form this path.
  const QUrl url(QStringLiteral("qrc:/qt/qml/QtAppQml/Main.qml"));
  QObject::connect(
      &engine, &QQmlApplicationEngine::objectCreated, &app,
      [url](QObject *obj, const QUrl &objUrl) {
        if (!obj && url == objUrl)
          QCoreApplication::exit(-1);
      },
      Qt::QueuedConnection);
  engine.load(url);

  return app.exec();
}